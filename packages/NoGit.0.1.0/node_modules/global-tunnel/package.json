{
  "_args": [
    [
      "global-tunnel@https://github.com/whyleee/global-tunnel/tarball/master",
      "C:\\temp\\forpg\\node_modules\\nogit"
    ]
  ],
  "_from": "https://github.com/whyleee/global-tunnel/tarball/master",
  "_id": "global-tunnel@1.2.0",
  "_inCache": true,
  "_location": "/global-tunnel",
  "_phantomChildren": {},
  "_requested": {
    "name": "global-tunnel",
    "raw": "global-tunnel@https://github.com/whyleee/global-tunnel/tarball/master",
    "rawSpec": "https://github.com/whyleee/global-tunnel/tarball/master",
    "scope": null,
    "spec": "https://github.com/whyleee/global-tunnel/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "/nogit"
  ],
  "_resolved": "https://github.com/whyleee/global-tunnel/tarball/master",
  "_shasum": "e311ff33be4ae8e19fe8aa227f849064bcc2a8a5",
  "_shrinkwrap": null,
  "_spec": "global-tunnel@https://github.com/whyleee/global-tunnel/tarball/master",
  "_where": "C:\\temp\\forpg\\node_modules\\nogit",
  "author": {
    "name": "GoInstant Inc., a salesforce.com company"
  },
  "bugs": {
    "url": "https://github.com/goinstant/global-tunnel/issues"
  },
  "dependencies": {
    "lodash": "1.3.1",
    "tunnel": "https://github.com/whyleee/node-tunnel/tarball/node-0.12-fix"
  },
  "description": "Global HTTP & HTTPS tunneling",
  "devDependencies": {
    "goinstant-assert": "1.1.1",
    "mocha": "1.16.2",
    "request": "2.30.0",
    "sinon": "1.7.3"
  },
  "engines": {
    "node": ">=0.12"
  },
  "homepage": "https://github.com/goinstant/global-tunnel#readme",
  "installable": true,
  "keywords": [
    "global",
    "http",
    "https",
    "tunnel"
  ],
  "license": "BSD-3-Clause",
  "main": "index.js",
  "name": "global-tunnel",
  "optionalDependencies": {},
  "readme": "# global-tunnel\n\nConfigures the [global\n`http`](http://nodejs.org/docs/v0.10.24/api/all.html#all_http_globalagent) and\n[`https`](http://nodejs.org/docs/v0.10.24/api/all.html#all_https_globalagent)\nagents to use an upstream HTTP proxy.\n\n[![Build Status](https://travis-ci.org/goinstant/global-tunnel.png)](https://travis-ci.org/goinstant/global-tunnel)\n\nWorks transparently to tunnel modules that use node's default [`http.request()`\nmethod](http://nodejs.org/docs/v0.10.24/api/all.html#all_http_request_options_callback)\nas well as the popular [`request` module](https://npmjs.org/package/request).\n\n# Usage\n\nTo make all HTTP and HTTPS connections go through an outbound HTTP proxy:\n\n```js\nvar globalTunnel = require('global-tunnel');\n\nglobalTunnel.initialize({\n  host: '10.0.0.10',\n  port: 8080,\n  sockets: 50 // optional pool size for each http and https\n});\n```\n\nThis will use the `CONNECT` method for HTTPS requests and absolute-URIs for\nHTTP requests, which is how many network proxies are configured.\n\nOptionally, to tear-down the global agent and restore node's default global\nagents:\n\n```js\nglobalTunnel.end();\n```\n\nAny active connections will be allowed to run to completion, but new\nconnections will use the default global agents.\n\n# Advanced Usage\n\n## Options\n\nThe complete list of options to `globalTunnel.initialize`:\n\n- **host** - the hostname or IP of the HTTP proxy to use\n- **port** - the TCP port to use on that proxy\n- **connect** _(optional)_ controls what protocols use the `CONNECT` method.  It\n  has three possible values (strings):\n  - **neither** - don't use `CONNECT`; just use absolute URIs\n  - **https** - _(the default)_ only use `CONNECT` for HTTPS requests\n  - **both** - use `CONNECT` for both HTTP and HTTPS requests\n- **protocol** - the protocol that the proxy speaks, either `http:` or `https:`.\n- **sockets** - _(optional)_ maximum number of TCP sockets to use in each pool.\n  There are two pools: one for HTTP and one for HTTPS.  Uses node's default (5)\n  if falsy.\n\n## Variations\n\nHere's a few interesting variations on the basic config.\n\n### Absolute URI Proxies\n\nAnother common proxy configuration is one that expects clients to use an\n[absolute URI for the\nRequest-URI](https://tools.ietf.org/html/rfc2616#section-5.1.2) for all HTTP\nand HTTPS requests.  This is common for networks that use a proxy for security\nscanning and access control.\n\nWhat does this mean? It means that instead of ...\n\n```http\nGET / HTTP/1.1\nHost: example.com\n```\n\n... your proxy expects ...\n\n```http\nGET https://example.com/ HTTP/1.1\n```\n\nYou'll need to specify `connect: 'neither'` if this is the case.  If the proxy\nspeaks HTTP (i.e. the connection from node --> proxy is not encrypted):\n\n```js\nglobalTunnel.initialize({\n  connect: 'neither',\n  host: '10.0.0.10',\n  port: 3128\n});\n```\n\nor, if the proxy speaks HTTPS to your app instead:\n\n```js\nglobalTunnel.initialize({\n  connect: 'neither',\n  protocol: 'https:'\n  host: '10.0.0.10',\n  port: 3129\n});\n```\n\n### Always-CONNECT Proxies\n\nIf the proxy expects you to use the `CONNECT` method for both HTTP and HTTPS\nrequests, you'll need the `connect: 'both'` option.\n\nWhat does this mean?  It means that instead of ...\n\n```http\nGET https://example.com/ HTTP/1.1\n```\n\n... your proxy expects ...\n\n```http\nCONNECT example.com:443 HTTP/1.1\n```\n\nBe sure to set the `protocol:` option based on what protocol the proxy speaks.\n\n```js\nglobalTunnel.initialize({\n  connect: 'both',\n  host: '10.0.0.10',\n  port: 3130\n});\n```\n\n### HTTPS configuration\n\n_EXPERIMENTAL_\n\nIf tunnelling both protocols, you can use different HTTPS client configurations\nfor the two phases of the connection.\n\n```js\nglobalTunnel.initialize({\n  connect: 'both',\n  protocol: 'https:'\n  host: '10.0.0.10',\n  port: 3130,\n  proxyHttpsConfig: {\n    // use this config for app -> proxy\n  },\n  originHttpsConfig: {\n    // use this config for proxy -> origin\n  }\n});\n```\n\n### Auto-Config\n\nThe `http_proxy` environment variable will be used if the first parameter to\n`globalTunnel.initialize` is null or an empty object.\n\n```js\nprocess.env.http_proxy = 'http://10.0.0.1:3129';\nglobalTunnel.initialize();\n```\n\n# Compatibility\n\nAny module that doesn't specify [an explicit `agent:` option to\n`http.request`](http://nodejs.org/docs/v0.10.24/api/all.html#all_http_request_options_callback)\nwill also work with global-tunnel.\n\nThe unit tests for this module verify that the popular [`request`\nmodule](https://npmjs.org/package/request) works with global-tunnel active.\n\nFor untested modules, it's recommended that you load and initialize\nglobal-tunnel first.  This way, any copies of `http.globalAgent` will point to\nthe right thing.\n\n# Contributing\n\nIf you'd like to contribute to or modify global-tunnel, here's a quick guide\nto get you started.\n\n## Development Dependencies\n\n- [node.js](http://nodejs.org) >= 0.10\n\n## Set-Up\n\nDownload via GitHub and install npm dependencies:\n\n```sh\ngit clone git@github.com:goinstant/global-tunnel.git\ncd global-tunnel\nnpm install\n```\n\n## Testing\n\nTesting is with the [mocha](https://github.com/visionmedia/mocha) framework.\nTests are located in the `test/` directory.\n\nTo run the tests:\n\n```sh\nnpm test\n```\n\n# Support\n\nEmail [GoInstant Support](mailto:support@goinstant.com) or stop by [#goinstant on freenode](irc://irc.freenode.net#goinstant).\n\nFor responsible disclosures, email [GoInstant Security](mailto:security@goinstant.com).\n\nTo [file a bug](https://github.com/goinstant/global-tunnel/issues) or\n[propose a patch](https://github.com/goinstant/global-tunnel/pulls),\nplease use github directly.\n\n# Legal\n\n&copy; 2014 GoInstant Inc., a salesforce.com company\n\nLicensed under the BSD 3-clause license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/goinstant/global-tunnel.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "version": "1.2.0"
}
